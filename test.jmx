<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r20190319">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de Pruebas" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Grupo de Hilos" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Bucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Informe Agregado" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Muestreador TCP" enabled="true">
          <stringProp name="TCPSampler.classname">TCPClientImpl</stringProp>
          <stringProp name="TCPSampler.server">127.0.0.1</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">6969</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready
\x72\x65\x61\x64\x79
ready</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">private static int tamBuffer = 65536;
	
	public static byte[] createChecksum(String archivo) throws Exception {
		InputStream inputIN =  new FileInputStream(archivo);

		byte[] buffer = new byte[tamBuffer];
		MessageDigest complete = MessageDigest.getInstance(&quot;MD5&quot;);
		int numRead;

		do {
			numRead = inputIN.read(buffer);
			if (numRead &gt; 0) {
				complete.update(buffer, 0, numRead);
			}
		} while (numRead != -1);

		inputIN.close();
		return complete.digest();
	}
	
	public static void main(String[] args) throws IOException{ 
		// obtener ip del host local 
		InetAddress ip = InetAddress.getByName(&quot;localhost&quot;); 
		// establish the connection with server port 5056 
		Socket socket = new Socket(ip, 6969);
		try
		{   
			// obtener streams de entrata y salida 
			DataInputStream dataIN = new DataInputStream(socket.getInputStream()); 
			DataOutputStream dataOUT = new DataOutputStream(socket.getOutputStream()); 
			System.out.println(&quot;Conectado al servidor con status &apos;isConnected&apos; = &quot; + socket.isConnected());
			System.out.println(&quot;Notificando el servidor que el cliete se encuentra listo...&quot;);
			String archivo=&quot;&quot;;  
			try{ 
				
				dataOUT.writeUTF(&quot;ready&quot;); 
				dataOUT.flush();  

				archivo=dataIN.readUTF(); 
				System.out.println(&quot;Reciviedo archivo: &quot;+archivo);
				if(archivo.contains(&quot;testl&quot;)){
					tamBuffer = tamBuffer*4;
				}
				archivo = socket.getLocalPort() + archivo;
				System.out.println(&quot;Guardando como: &quot;+archivo);

				BufferedInputStream bufferIN = 
						new BufferedInputStream(socket.getInputStream());

				BufferedOutputStream bufferOUT = 
						new BufferedOutputStream(new FileOutputStream(archivo));

				long tamano=Long.parseLong(dataIN.readUTF());
				System.out.println (&quot;TamaÃ±o del Archivo: &quot;+(tamano/(1024*1024))+&quot; MB&quot;);
				
				System.out.println(&quot;Reciviendo CHECKSUM...&quot;);
				String serverCheckSum = dataIN.readUTF();

				byte buffer[] = new byte[tamBuffer];
				System.out.println(&quot;Reciviendo archivo...&quot;);
				
				int len = 0;
				long tiempoIni = System.currentTimeMillis();
		        while ((len = bufferIN.read(buffer)) &gt; 0) {
		            bufferOUT.write(buffer, 0, len);
		        }
		        bufferOUT.flush();
		        System.out.println(&quot;Comprobando integridad del archivo...&quot;);
		        long tiempoFin = System.currentTimeMillis();
		        byte[] digest = createChecksum(archivo);
		        String clientCheckSum = &quot;&quot;;
				for(byte bytee: digest){
					clientCheckSum += bytee;
				}
				boolean completo = true;
				if(!clientCheckSum.equals(serverCheckSum)){
					System.out.println(&quot;Integridad del archivo incorrecta.&quot;);
					completo = false;
				}
				else{
					System.out.println(&quot;Integridad el archivo verificada.&quot;);
				}
				System.out.println(&quot;Completado.&quot;);
				
				
				BufferedWriter writer = null;
				try {
					//crear archivo temporal
					String logTiempo = new SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;).format(Calendar.getInstance().getTime());
					File archivoLog = new File(archivo+&quot;.txt&quot;);

					//La ruta a donde el archivo quedarÃ¡ guardado
					System.out.println(archivoLog.getCanonicalPath());

					writer = new BufferedWriter(new FileWriter(archivoLog));
					writer.write(&quot;Prueba del TCP&quot;+&quot;;&quot;);
					writer.write(&quot;Log tiempo;&quot; + logTiempo+&quot;;&quot;);
					writer.write(&quot;Nombre del archivo;&quot;+ archivo+&quot;;&quot;);
					writer.write(&quot;TamaÃ±o del archivo;&quot;+(tamano/(1024*1024))+&quot; MB&quot;+&quot;;&quot;);
					writer.write(&quot;Ofrecido para el cliente;&quot; + socket+&quot;;&quot;);
					if(completo){
						writer.write(&quot;Exitoso&quot;+&quot;;&quot;);
					}
					else{
						writer.write(&quot;Ojo ahi que no fue exitoso y el archivo puede estar jodido&quot;+&quot;;&quot;);
					}
					double tiempoTrans = (tiempoFin-tiempoIni)/1000;
					writer.write(&quot;Time elapsed in seconds;&quot; + tiempoTrans+&quot;;&quot;);
					
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					try {
						//Cerrar el writer sin importar que pase
						writer.close();
					} catch (Exception e) {
					}
				}
				
				dataOUT.flush();
				bufferIN.close();
			    bufferOUT.close();
				dataIN.close();
				dataOUT.close();
			}
			catch(EOFException e)
			{
				//do nothing
			}
		}catch(Exception e){
			socket.close();
			e.printStackTrace(); 
		} 
	} </stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;)</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
